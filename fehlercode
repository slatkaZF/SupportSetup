# Clear console for a clean start (uncomment if needed)
# Clear-Host

# Set path to configuration file
$ConfigPath = Join-Path $PSScriptRoot "config.json"

# Define simple logging functions for consistent output
function Write-Info { Write-Output "[INFO] $args" }
function Write-Warn { Write-Output "[WARN] $args" }
function Write-Err { Write-Output "[ERROR] $args" }

# Check for administrative privileges
# Ensures the script runs with elevated permissions
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)) {
    Write-Err "Please run this script with administrative privileges."
    exit 1
}

# Load configuration from JSON file
# Uses UTF8 encoding to support special characters
if (-not (Test-Path $ConfigPath)) {
    Write-Err "Configuration file not found: $ConfigPath"
    exit 1
}
$Config = Get-Content $ConfigPath -Raw -Encoding UTF8 | ConvertFrom-Json
$RootPath = $Config.root
Write-Info "Root directory: $RootPath"

# Start transcript logging (if enabled)
if ($Config.features.enableTranscriptLogging) {
    $LogDirectory = [Environment]::ExpandEnvironmentVariables($Config.logging.directory)
    if (-not (Test-Path $LogDirectory)) {
        New-Item -ItemType Directory -Path $LogDirectory -Force | Out-Null  # Suppress output to keep console clean
    }
    $LogFile = $Config.logging.fileNamePattern -replace "\{timestamp\}", (Get-Date -Format "yyyyMMdd_HHmmss")
    $TranscriptPath = Join-Path $LogDirectory $LogFile
    Start-Transcript -Path $TranscriptPath -Force | Out-Null  # Suppress output to keep console clean
    Write-Info "Transcript started: $TranscriptPath"
}

# Create project folders (if enabled)
if ($Config.features.createFolders -and $Config.folderProvisioning.projectDirectories) {
    Write-Info "Creating project folders..."
    foreach ($FolderPath in $Config.folderProvisioning.projectDirectories) {
        # Replace {root} with the root path from config
        $Path = $FolderPath.Replace("{root}", $RootPath)
        $Path = [Environment]::ExpandEnvironmentVariables($Path)
        if (-not (Test-Path $Path)) {
            New-Item -ItemType Directory -Path $Path -Force | Out-Null  # Suppress output to keep console clean
            Write-Info "Directory created: $Path"
        }
    }
    Write-Info "All folders created."
}

# Set security policies (if enabled)
if ($Config.features.setSecurityPolicies -and $Config.systemSecuritySettings) {
    if ($Config.systemSecuritySettings.executionPolicyForScripts) {
        try {
            Set-ExecutionPolicy -ExecutionPolicy $Config.systemSecuritySettings.executionPolicyForScripts -Scope LocalMachine -Force
            Write-Info "ExecutionPolicy set to $($Config.systemSecuritySettings.executionPolicyForScripts)."
        } catch {
            Write-Warn "Failed to set ExecutionPolicy: $_"
        }
    }
}

# Create local support account
# Commented out unused registry variables as per manual security policy setting
# $registryPath = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System"
# $registryName = "LocalAccountTokenFilterPolicy"
# $registryValue = 1

# Define parameters for the new user from config
$password = ConvertTo-SecureString $Config.localSupportAccount.password -AsPlainText -Force
$params = @{
    Name = $Config.localSupportAccount.username
    Password = $password
    Description = $Config.localSupportAccount.description
}

# Create new local "Support" user
New-LocalUser @params -UserMayNotChangePassword -PasswordNeverExpires -AccountNeverExpires

# Add the "Support" user to the Administrators group
Add-LocalGroupMember -Group "Administrators" -Member $Config.localSupportAccount.username

# Copy files (if defined in config)
if ($Config.jobs) {
    foreach ($CopyJob in $Config.jobs) {
        try {
            # Replace {root} with the root path from config
            $Source = $CopyJob.Source.Replace("{root}", $RootPath)
            $Source = [Environment]::ExpandEnvironmentVariables($Source)
            $Destination = $CopyJob.Target.Replace("{root}", $RootPath)
            $Destination = [Environment]::ExpandEnvironmentVariables($Destination)
            $LogFile = $CopyJob.LogFile.Replace("{timestamp}", (Get-Date -Format "yyyyMMdd_HHmmss"))
            $LogFile = [Environment]::ExpandEnvironmentVariables($LogFile)
            if (-not (Test-Path $Destination)) {
                New-Item -ItemType Directory -Path $Destination -Force | Out-Null  # Suppress output to keep console clean
            }
            Write-Info "Copying $($CopyJob.FilePattern) from $Source to $Destination"
            Copy-Item -Path $Source -Destination $Destination -Force
            Write-Info "Success: $($CopyJob.FilePattern) copied."
            if ($LogFile) {
                Add-Content -Path $LogFile -Value "$(Get-Date) SUCCESS: Copied $Source to $Destination"
            }
        } catch {
            Write-Err "Failed to copy $($CopyJob.FilePattern): $_"
            if ($LogFile) {
                Add-Content -Path $LogFile -Value "$(Get-Date) ERROR: $_"
            }
        }
    }
}

# Cleanup and finalize
if ($Config.features.enableTranscriptLogging) {
    Stop-Transcript | Out-Null  # Suppress output to keep console clean
}
Write-Info "Script completed."
